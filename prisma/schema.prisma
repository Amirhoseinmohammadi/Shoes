generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

model User {
  id        Int        @id @default(autoincrement())
  username  String     @unique
  firstName String?
  lastName  String?
  phone     String?
  createdAt DateTime   @default(now())
  updatedAt DateTime?  @updatedAt // 👈 اضافه شد: اختیاری تا قابل اضافه‌کردن بشه

  cartItems CartItem[]
  orders    Order[]

  @@map("User")
}

model Product {
  id          Int      @id @default(autoincrement())
  name        String   @unique 
  brand       String
  price       Float
  description String?
  image       String?
  category    String?
  isActive    Boolean  @default(true)
  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt // 👈 اختیاری شد

  cartItems  CartItem[]
  variants   Variant[]
  orderItems OrderItem[]

  @@map("Product")
}

model Variant {
  id        Int            @id @default(autoincrement())
  color     String
  productId Int
  product   Product        @relation(fields: [productId], references: [id], onDelete: Cascade)
  images    VariantImage[]
  sizes     Size[]

  @@map("Variant")
}

model VariantImage {
  id        Int     @id @default(autoincrement())
  url       String
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  @@map("VariantImage")
}

model Size {
  id        Int     @id @default(autoincrement())
  size      String
  stock     Int     @default(0)
  variantId Int
  variant   Variant @relation(fields: [variantId], references: [id], onDelete: Cascade)

  cartItems CartItem[]

  @@map("Size")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  quantity  Int      @default(1)
  color     String?
  sizeId    Int?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  size    Size?   @relation(fields: [sizeId], references: [id], onDelete: Cascade)

  @@map("cart_items") // ✅ این جدول قبلاً هم همینطور بود
}

model Order {
  id            Int         @id @default(autoincrement())
  userId        Int
  status        OrderStatus @default(PENDING)
  total         Float?      // 👈 اختیاری شد
  customerName  String?     // 👈 اختیاری شد
  customerPhone String?     // 👈 اختیاری شد
  address       String?
  trackingCode  String?
  notes         String?
  telegramData  String?     
  
  createdAt DateTime @default(now())
  updatedAt DateTime? @updatedAt // 👈 اختیاری شد

  items OrderItem[]
  user  User       @relation(fields: [userId], references: [id])

  @@map("Order")
}

model OrderItem {
  id        Int     @id @default(autoincrement())
  orderId   Int
  productId Int
  quantity  Int
  price     Float   
  color     String?
  size      String?

  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("OrderItem")
}
